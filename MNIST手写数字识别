import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("MNIST_data",one_hot=True)
x = tf.placeholder(tf.float32,[None,784])
y = tf.placeholder(tf.float32,[None,10])
W = tf.Variable(tf.zeros([784,10]))
b = tf.Variable(tf.zeros([10]))
prediction = tf.nn.softmax(tf.matmul(x,W)+b)
y=tf.nn.softmax(tf.matmul(x,W)+b)
cross_entropy= tf.reduce_mean(-tf.reduce_sum(y* tf.log(prediction), reduction_indices=[1]))
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)
correct_prediction = tf.equal(tf.argmax(prediction,1),tf.argmax(y,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
sess=tf.Session()
sess.run(tf.global_variables_initializer())
for i in range(1000):
    batch_xs,batch_ys =mnist.train.next_batch(100)
    _,loss,acc=sess.run([train_step,cross_entropy,accuracy],feed_dict={x:batch_xs,y:batch_ys})
    if i%50==0:
        print('loss: %f' % loss)
        print('accuracy: %.4f' % acc)
